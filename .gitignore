package example.priorityqueuesroundrobinio;
//βιβλιοθήκες για τις ΔΔ που θα χρησιμοποιηθούν παρακάτω
import java.util.LinkedList;
import java.util.Queue;
import java.util.*;
//εδώ θα ορίσουμε τις διεργασίες (ως αντικείμενα)
class Process implements Comparable<Process> {
    // Δήλωση μεταβλητών/ορισμάτων που κατέχουν τη θέση των στοιχείων της κάθε διεργασίας
    int id;  // Αριθμός κάθε διεργασίας
    int arrivalTime;  // χρόνος άφιξης κάθε διεργασίας
    int burstTime;    // χρόνος εκτέλεσης κάθε διεργασίας
    int ioOperations; // Ο αριθμός των λειτουργιών Ι/Ο που πρόκειται να εκτελέσει η διεργασία

    // Constructor/Δομητής
    public Process(int id, int arrivalTime, int burstTime, int ioOperations) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.ioOperations = ioOperations;
    }

    // Η μέθοδος compareTo (υλοποιεί την διεπαφή comparable) η οποία συγκρίνει τις διεργασίες μεταξύ τους βάσει του χρόνου εκτέλεσης τους ("arrivalTime").
    // Μικρότερο arrival time = μεγαλύτερη σειρά προτεραιότητας
    @Override
    public int compareTo(Process other) {
        return Integer.compare(this.arrivalTime, other.arrivalTime);
    }
}

public class PriorityQueuesRoundRobinIO {
    public static void main(String[] args) {
        // Δημιουργία πίνακα αντικειμένων με 5 αντικείμενα (διεργασίες). Περνάμε παραμετρικά τις τιμές των στοιχείων των διεργασιών βάσει του δομητή μας.
        Process[] processes = {new Process(1, 0, 5, 2), new Process(2, 2, 3, 1), new Process(3, 4, 1, 0), new Process(4, 5, 4, 1), new Process(5, 7, 2, 2)};

        // Η PriorityQueue αποτελεί μια ουρά προτεραιότητας που ταξινομεί τις διεργασίες βάσει του χρόνου εκτέλεσης τους (burstTime)
        Queue<Process> priorityQueue = new PriorityQueue<>();

        // Η Blocked list αποτελεί και αυτή μια δομή δεδ. στην οποία θα αποθηκεύονται οι διεργασίες οι οποίες εκτελούν λειτουργία I/O.
        // Οι διεργασίες αυτές απομακρύνονται από την ουρά προτεραιότητας (priorityQueue) και τοποθετούνται εδώ μέχρις ότου να ολοκληρωθεί η λειτουργία I/O.
        Queue<Process> blockedList = new LinkedList<>();

        // Σταθερό χρονικό κβάντο για τον αλγόριθμο Round Robin
        int timeQuantum = 2;

        // Υπολογισμός μέσου όρου απόκρισης και μέσου όρου επιστροφής
        int totalResponseTime = 0; //χρόνος απόκρισης
        int totalTurnaroundTime = 0; //χρόνος επιστροφής

        int currentTime = 0;

        for (Process process : processes) {
            priorityQueue.offer(process);
        }

        //έλεγχος άδειας ουράς προτεραιότητας αλλά και blockedList. Θα σταματήσει όταν και οι δύο ΔΔ είναι κενές
        while (!priorityQueue.isEmpty() || !blockedList.isEmpty()) {
            //εκτελείται όσο υπάρχουν διεργασίες στην ουρά προτεραιότητας.
            while (!priorityQueue.isEmpty()) {
                Process currentProcess = priorityQueue.poll();     //καθορισμός τρέχουσας διεργασίας βάσει την προτεραιότητα της
                int responseTime = Math.max(currentTime, currentProcess.arrivalTime);
                int remainingBurstTime = currentProcess.burstTime;      //υπολειπόμενος χρόνος εκτέλεσης

                if (remainingBurstTime <= timeQuantum) {          //έλεγχος για το αν ο υπολειπόμενος χρόνος εκτέλεσης (remainingBurstTime) είναι μικρότερος ή ίσος του κβάντου χρόνου.
                    currentTime += remainingBurstTime;            //εάν είναι, η διεργασία θα ολοκληρωθεί και ο χρόνος εκτέλεσης (burstTime) προστίθεται στον τρέχοντα χρόνο
                } else {
                    currentTime += timeQuantum;                   //αλλιώς η διεργασία προστίθεται στη block list
                    blockedList.offer(new Process(currentProcess.id, currentTime, remainingBurstTime - timeQuantum, currentProcess.ioOperations));
                }

                int turnaroundTime = currentTime;

                // Εκτύπωση αποτελεσμάτων σε μορφή πίνακα
                System.out.println("Process " + currentProcess.id + " - Response Time: " + responseTime + ", Turnaround Time: " + turnaroundTime);

                // Συνολικός υπολογισμός μέσων όρων
                totalResponseTime += responseTime;
                totalTurnaroundTime += turnaroundTime;
            }

            // Εκτέλεση Ι/Ο και επανατοποθέτηση στην ουρά προτεραιότητας
            while (!blockedList.isEmpty()) {
                Process ioProcess = blockedList.poll();
                int remainingIO = ioProcess.ioOperations;

                if (remainingIO > 0) {
                    // Η διεργασία δεν έχει ολοκληρώσει όλες τις λειτουργίες Ι/Ο
                    blockedList.offer(new Process(ioProcess.id, currentTime, ioProcess.burstTime, remainingIO - 1));
                } else {
                    // Η διεργασία ολοκλήρωσε όλες τις λειτουργίες Ι/Ο
                    priorityQueue.offer(new Process(ioProcess.id, currentTime, ioProcess.burstTime, 0));
                }
            }
        }

        // Υπολογισμός μέσων όρων
        double avgResponseTime = (double) totalResponseTime / processes.length;
        double avgTurnaroundTime = (double) totalTurnaroundTime / processes.length;
        // Τελική εκτύπωση μέσων όρων
        System.out.println("\nAverage Response Time : " + avgResponseTime);
        System.out.println("Average Turnaround Time : " + avgTurnaroundTime);
    }
}
